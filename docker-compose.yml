version: '3.8'

services:

  zookeeper:
    image: 'bitnami/zookeeper:3.7'
    networks:
      - app-network
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
#      - ZOOKEEPER_CLIENT_PORT=2181
#      - ZOOKEEPER_TICK_TIME=5000
#      - ZOOKEEPER_INIT_LIMIT=5
#      - ZOOKEEPER_SYNC_LIMIT=2
#      - ZOOKEEPER_SERVER_ID=0
    volumes:
       - zookeeper_data:/bitnami

  mysql:
    image: mysql:latest
    ports:
      - "3306:3306"
    env_file:
      - .env  # 동일한 환경 변수 파일을 사용
    volumes:
      - db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  redis_insight:
    image: redislabs/redisinsight:latest
    container_name: redis_insight
    ports:
      - "5540:5540"
    restart: always
    networks:
      - app-network

  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - app-network
    ports:
      - "9092:9092"
      - "9094:9094"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://192.168.10.20:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - app-network
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: "local-cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      KAFKA_CLUSTERS_0_READONLY: "false"

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - mysql
      - redis
      - kafka
    env_file:
      - .env
    restart: always
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/docs" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  zookeeper_data:
  kafka_data:
