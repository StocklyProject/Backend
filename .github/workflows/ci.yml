name: CI

on:
  push:
    branches:
      - '**'  # 모든 브랜치에서 작동
  pull_request:
    branches:
      - '**'

jobs:
  test_and_push:
    name: Run tests, check coverage, and push Docker image
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Check out the repo
        uses: actions/checkout@v4

      # 2. Python 환경 설정 및 의존성 설치
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r src/requirements.txt
          pip3 install coverage

      # 3. 태그를 기준으로 버전을 1씩 증가시키는 로직
      - name: Set Image Tag
        id: set_image_tag
        run: |
          # 가장 최근 태그를 가져오기 (없으면 1.0.0으로 시작)
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "1.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # 정규식으로 태그 형식 확인 (e.g., 1.0.0)
          if [[ $LATEST_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            
            # PATCH 버전을 1 증가
            PATCH=$((PATCH + 1))
          else
            # 기본 태그 값 설정
            MAJOR=1
            MINOR=0
            PATCH=0
          fi
          
          # main 브랜치인지 확인하여 태그 지정
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "IMAGE_TAG=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=0.${MINOR}.${PATCH}" >> $GITHUB_ENV
          fi
        shell: bash

      # 4. 유닛 테스트 실행
      - name: Run tests and display result
        run: |
          ls
          export PYTHONPATH=$GITHUB_WORKSPACE/src
          echo "PYTHONPATH is set to: $PYTHONPATH"
          python3 -m unittest discover -s src/test -p "test_*.py"

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t jungeunyoon/stock_server:${{ env.IMAGE_TAG }} .
          docker push jungeunyoon/stock_server:${{ env.IMAGE_TAG }}