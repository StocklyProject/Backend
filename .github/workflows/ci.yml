name: CI

on:
  push:
    branches:
      - '**'  # 모든 브랜치에서 작동
  pull_request:
    branches:
      - '**'

jobs:
  test_and_push:
    name: Run tests and push Docker image
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Check out the repo
        uses: actions/checkout@v4

      # 2. Python 환경 설정 및 의존성 설치
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r src/requirements.txt

      # 3. PR 번호를 가져와서 이미지 태그 설정
      - name: Set Image Tag
        id: set_image_tag
        run: |
          # PR 번호 가져오기 (PR이 아닐 경우 기본값 0 설정)
          PR_NUMBER="${{ github.event.number || 0 }}"
          echo "PR Number: $PR_NUMBER"

          # main 브랜치인지 확인하여 태그 지정
          if [ "${{ github.ref_name }}" == "main" ]; then
            IMAGE_TAG="1.0.$PR_NUMBER"
          else
            IMAGE_TAG="0.0.$PR_NUMBER"
          fi

          # 이미지 태그를 환경 변수로 설정
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "Next image tag: $IMAGE_TAG"
        shell: bash

      # 4. 유닛 테스트 실행
      - name: Run tests and display result
        run: |
          ls
          ls src/test
          export PYTHONPATH=$GITHUB_WORKSPACE  # 프로젝트 루트 디렉토리를 PYTHONPATH에 추가
          echo "PYTHONPATH is set to: $PYTHONPATH"
          pytest src/test --maxfail=1 --disable-warnings -v

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t jungeunyoon/stock_server:${{ env.IMAGE_TAG }} .
          docker push jungeunyoon/stock_server:${{ env.IMAGE_TAG }}